{-
  This file was generated by endpoints-elm interpreter.
  Do not edit this file manually.

  See https://github.com/scalalandio/endpoints-elm for more information.
-}

module Data.TimeOrID exposing (..)

import Data.io.scalaland.endpoints.elm.BasicTypeTest.Domain.TimeOrID.ID exposing (..)
import Data.io.scalaland.endpoints.elm.BasicTypeTest.Domain.TimeOrID.Time exposing (..)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type TimeOrID
  = TimeOrIDIDType io.scalaland.endpoints.elm.BasicTypeTest.Domain.TimeOrID.ID
  | TimeOrIDTimeType io.scalaland.endpoints.elm.BasicTypeTest.Domain.TimeOrID.Time

init : TimeOrID
init = TimeOrIDIDType Data.io.scalaland.endpoints.elm.BasicTypeTest.Domain.TimeOrID.ID.init

decoder : Decoder TimeOrID
decoder = Decode.field "type" Decode.string
  |> Decode.andThen decoderTagged

decoderTagged : String -> Decoder TimeOrID
decoderTagged tag = case tag of
  "ID" ->
    Decode.map TimeOrIDIDType Data.io.scalaland.endpoints.elm.BasicTypeTest.Domain.TimeOrID.ID.decoder

  "Time" ->
    Decode.map TimeOrIDTimeType Data.io.scalaland.endpoints.elm.BasicTypeTest.Domain.TimeOrID.Time.decoder

  _ ->
    Decode.fail <| "Trying to decode TimeOrID, but type " ++ tag ++ " is not supported!"

encoder : TimeOrID -> Encode.Value
encoder model = case model of
  TimeOrIDIDType id ->
    Data.io.scalaland.endpoints.elm.BasicTypeTest.Domain.TimeOrID.ID.encoderTagged ("type", "ID" ) id

  TimeOrIDTimeType time ->
    Data.io.scalaland.endpoints.elm.BasicTypeTest.Domain.TimeOrID.Time.encoderTagged ("type", "Time" ) time





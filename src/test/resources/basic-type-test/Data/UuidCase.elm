{-
  This file was generated by endpoints-elm interpreter.
  Do not edit this file manually.

  See https://github.com/scalalandio/endpoints-elm for more information.
-}

module Data.UuidCase exposing (..)

import Random exposing (..)
import Uuid exposing (..)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias UuidCase = 
  { value : Uuid
  , msg : String
  }

init : UuidCase
init = 
  { value = Tuple.first <| step Uuid.uuidGenerator (initialSeed 0)
  , msg = ""
  }

decoder : Decoder UuidCase
decoder = Decode.succeed UuidCase
  |> required "value" Uuid.decoder 
  |> required "msg" Decode.string 

encoder : UuidCase -> Encode.Value
encoder model = Encode.object (fieldsEncoder model)

encoderTagged : (String, String) -> UuidCase -> Encode.Value
encoderTagged (discriminator, tag) model = Encode.object ((discriminator, Encode.string tag) :: fieldsEncoder model)

fieldsEncoder : UuidCase -> List (String, Encode.Value)
fieldsEncoder model = 
  [ ( "value", Uuid.encode model.value )
  , ( "msg", Encode.string model.msg )
  ]

setValue : Uuid -> UuidCase -> UuidCase
setValue newValue uuidCase =
  { uuidCase | value = newValue }

setMsg : String -> UuidCase -> UuidCase
setMsg newMsg uuidCase =
  { uuidCase | msg = newMsg }


updateValue : (Uuid -> Uuid) -> UuidCase -> UuidCase
updateValue f uuidCase =
  { uuidCase | value = f uuidCase.value }

updateMsg : (String -> String) -> UuidCase -> UuidCase
updateMsg f uuidCase =
  { uuidCase | msg = f uuidCase.msg }

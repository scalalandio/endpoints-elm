{-
  This file was generated by endpoints-elm interpreter.
  Do not edit this file manually.

  See https://github.com/scalalandio/endpoints-elm for more information.
-}

module Data.ID exposing (..)

import Random exposing (..)
import Uuid exposing (..)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias ID = 
  { value : Uuid
  , msg : String
  }

init : ID
init = 
  { value = Tuple.first <| step Uuid.uuidGenerator (initialSeed 0)
  , msg = ""
  }

decoder : Decoder ID
decoder = Decode.succeed ID
  |> required "value" Uuid.decoder 
  |> required "msg" Decode.string 

encoder : ID -> Encode.Value
encoder model = Encode.object (fieldsEncoder model)

encoderTagged : (String, String) -> ID -> Encode.Value
encoderTagged (discriminator, tag) model = Encode.object ((discriminator, Encode.string tag) :: fieldsEncoder model)

fieldsEncoder : ID -> List (String, Encode.Value)
fieldsEncoder model = 
  [ ( "value", Uuid.encode model.value )
  , ( "msg", Encode.string model.msg )
  ]

setValue : Uuid -> ID -> ID
setValue newValue iD =
  { iD | value = newValue }
setMsg : String -> ID -> ID
setMsg newMsg iD =
  { iD | msg = newMsg }

updateValue : (Uuid -> Uuid) -> ID -> ID
updateValue f iD =
  { iD | value = f iD.value }
updateMsg : (String -> String) -> ID -> ID
updateMsg f iD =
  { iD | msg = f iD.msg }
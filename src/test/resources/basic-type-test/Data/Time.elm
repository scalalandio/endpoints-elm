{-
  This file was generated by endpoints-elm interpreter.
  Do not edit this file manually.

  See https://github.com/scalalandio/endpoints-elm for more information.
-}

module Data.Time exposing (..)

import TimeOnly exposing (..)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias Time = 
  { value : TimeOnly
  , msg : String
  }

init : Time
init = 
  { value = TimeOnly.init
  , msg = ""
  }

decoder : Decoder Time
decoder = Decode.succeed Time
  |> required "value" TimeOnly.decoder 
  |> required "msg" Decode.string 

encoder : Time -> Encode.Value
encoder model = Encode.object (fieldsEncoder model)

encoderTagged : (String, String) -> Time -> Encode.Value
encoderTagged (discriminator, tag) model = Encode.object ((discriminator, Encode.string tag) :: fieldsEncoder model)

fieldsEncoder : Time -> List (String, Encode.Value)
fieldsEncoder model = 
  [ ( "value", TimeOnly.encoder model.value )
  , ( "msg", Encode.string model.msg )
  ]

setValue : TimeOnly -> Time -> Time
setValue newValue time =
  { time | value = newValue }
setMsg : String -> Time -> Time
setMsg newMsg time =
  { time | msg = newMsg }

updateValue : (TimeOnly -> TimeOnly) -> Time -> Time
updateValue f time =
  { time | value = f time.value }
updateMsg : (String -> String) -> Time -> Time
updateMsg f time =
  { time | msg = f time.msg }
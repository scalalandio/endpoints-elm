{-
  This file was generated by endpoints-elm interpreter.
  Do not edit this file manually.

  See https://github.com/scalalandio/endpoints-elm for more information.
-}

module Data.DateOrUuid exposing (..)

import Data.DateCase exposing (..)
import Data.UuidCase exposing (..)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type DateOrUuid
  = DateOrUuidDateCaseType DateCase
  | DateOrUuidUuidCaseType UuidCase

init : DateOrUuid
init = DateOrUuidDateCaseType Data.DateCase.init

decoder : Decoder DateOrUuid
decoder = Decode.field "type" Decode.string
  |> Decode.andThen decoderTagged

decoderTagged : String -> Decoder DateOrUuid
decoderTagged tag = case tag of
  "DateCase" ->
    Decode.map DateOrUuidDateCaseType Data.DateCase.decoder

  "UuidCase" ->
    Decode.map DateOrUuidUuidCaseType Data.UuidCase.decoder

  _ ->
    Decode.fail <| "Trying to decode DateOrUuid, but type " ++ tag ++ " is not supported!"

encoder : DateOrUuid -> Encode.Value
encoder model = case model of
  DateOrUuidDateCaseType datecase ->
    Data.DateCase.encoderTagged ("type", "DateCase" ) datecase

  DateOrUuidUuidCaseType uuidcase ->
    Data.UuidCase.encoderTagged ("type", "UuidCase" ) uuidcase





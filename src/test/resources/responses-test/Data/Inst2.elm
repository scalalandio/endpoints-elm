{-
  This file was generated by endpoints-elm interpreter.
  Do not edit this file manually.

  See https://github.com/scalalandio/endpoints-elm for more information.
-}

module Data.Inst2 exposing (..)

import Date exposing (..)
import Random exposing (..)
import Uuid exposing (..)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias Inst2 =
  { field1 : Uuid
  , field2 : Date
  }

init : Inst2
init =
  { field1 = Tuple.first <| step Uuid.uuidGenerator (initialSeed 0)
  , field2 = Date.fromOrdinalDate 1970 1
  }

decoder : Decoder Inst2
decoder = Decode.succeed Inst2
  |> required "field1" Uuid.decoder 
  |> required "field2" (Decode.string |> Decode.andThen (Date.fromIsoString >> Result.map Decode.succeed >> Result.withDefault (Decode.fail "can't parse the date!"))) 

encoder : Inst2 -> Encode.Value
encoder model = Encode.object (fieldsEncoder model)

encoderTagged : (String, String) -> Inst2 -> Encode.Value
encoderTagged (discriminator, tag) model = Encode.object ((discriminator, Encode.string tag) :: fieldsEncoder model)

fieldsEncoder : Inst2 -> List (String, Encode.Value)
fieldsEncoder model = 
  [ ( "field1", Uuid.encode model.field1 )
  , ( "field2", (Encode.string << Date.toIsoString) model.field2 )
  ]

setField1 : Uuid -> Inst2 -> Inst2
setField1 newField1 inst2 =
  { inst2 | field1 = newField1 }

setField2 : Date -> Inst2 -> Inst2
setField2 newField2 inst2 =
  { inst2 | field2 = newField2 }


updateField1 : (Uuid -> Uuid) -> Inst2 -> Inst2
updateField1 f inst2 =
  { inst2 | field1 = f inst2.field1 }

updateField2 : (Date -> Date) -> Inst2 -> Inst2
updateField2 f inst2 =
  { inst2 | field2 = f inst2.field2 }

{-
  This file was generated by endpoints-elm 0.10.0 interpreter.
  Do not edit this file manually.

  See https://github.com/scalalandio/endpoints-elm for more information.
-}

module Request.Requests exposing (..)

import Request.Url.Requests
import Http
import HttpBuilder.Task exposing (RequestBuilder)
import Json.Decode as Decode
import Json.Encode as Encode
import Bool.Extra
import Maybe.Extra
import Bytes exposing (Bytes)
import Dict exposing (Dict)

import Data.Coproduct exposing (..)
import Data.Foo exposing (..)
import Date exposing (..)
import Uuid exposing (..)
import EndpointsElm


jsonstringPost : String -> RequestBuilder Http.Error ()
jsonstringPost string =
  HttpBuilder.Task.post (Request.Url.Requests.jsonstringPost )
    |> HttpBuilder.Task.withBody (Http.jsonBody (Encode.string string))
    |> HttpBuilder.Task.withResolver (Http.stringResolver (EndpointsElm.httpResolveUnit))
    |> HttpBuilder.Task.withTimeout 30000


jsonintPost : Int -> RequestBuilder Http.Error ()
jsonintPost int =
  HttpBuilder.Task.post (Request.Url.Requests.jsonintPost )
    |> HttpBuilder.Task.withBody (Http.jsonBody (Encode.int int))
    |> HttpBuilder.Task.withResolver (Http.stringResolver (EndpointsElm.httpResolveUnit))
    |> HttpBuilder.Task.withTimeout 30000


jsonlongPost : Int -> RequestBuilder Http.Error ()
jsonlongPost int =
  HttpBuilder.Task.post (Request.Url.Requests.jsonlongPost )
    |> HttpBuilder.Task.withBody (Http.jsonBody (Encode.int int))
    |> HttpBuilder.Task.withResolver (Http.stringResolver (EndpointsElm.httpResolveUnit))
    |> HttpBuilder.Task.withTimeout 30000


jsonfloatPost : Float -> RequestBuilder Http.Error ()
jsonfloatPost float =
  HttpBuilder.Task.post (Request.Url.Requests.jsonfloatPost )
    |> HttpBuilder.Task.withBody (Http.jsonBody (Encode.float float))
    |> HttpBuilder.Task.withResolver (Http.stringResolver (EndpointsElm.httpResolveUnit))
    |> HttpBuilder.Task.withTimeout 30000


jsondoublePost : Float -> RequestBuilder Http.Error ()
jsondoublePost float =
  HttpBuilder.Task.post (Request.Url.Requests.jsondoublePost )
    |> HttpBuilder.Task.withBody (Http.jsonBody (Encode.float float))
    |> HttpBuilder.Task.withResolver (Http.stringResolver (EndpointsElm.httpResolveUnit))
    |> HttpBuilder.Task.withTimeout 30000


jsonbooleanPost : Bool -> RequestBuilder Http.Error ()
jsonbooleanPost bool =
  HttpBuilder.Task.post (Request.Url.Requests.jsonbooleanPost )
    |> HttpBuilder.Task.withBody (Http.jsonBody (Encode.bool bool))
    |> HttpBuilder.Task.withResolver (Http.stringResolver (EndpointsElm.httpResolveUnit))
    |> HttpBuilder.Task.withTimeout 30000


jsonuuidPost : Uuid -> RequestBuilder Http.Error ()
jsonuuidPost uuid =
  HttpBuilder.Task.post (Request.Url.Requests.jsonuuidPost )
    |> HttpBuilder.Task.withBody (Http.jsonBody (Uuid.encode uuid))
    |> HttpBuilder.Task.withResolver (Http.stringResolver (EndpointsElm.httpResolveUnit))
    |> HttpBuilder.Task.withTimeout 30000


jsondatePost : Date -> RequestBuilder Http.Error ()
jsondatePost date =
  HttpBuilder.Task.post (Request.Url.Requests.jsondatePost )
    |> HttpBuilder.Task.withBody (Http.jsonBody ((Encode.string << Date.toIsoString) date))
    |> HttpBuilder.Task.withResolver (Http.stringResolver (EndpointsElm.httpResolveUnit))
    |> HttpBuilder.Task.withTimeout 30000


jsoncaseclassPost : Foo -> RequestBuilder Http.Error ()
jsoncaseclassPost foo =
  HttpBuilder.Task.post (Request.Url.Requests.jsoncaseclassPost )
    |> HttpBuilder.Task.withBody (Http.jsonBody (Data.Foo.encoder foo))
    |> HttpBuilder.Task.withResolver (Http.stringResolver (EndpointsElm.httpResolveUnit))
    |> HttpBuilder.Task.withTimeout 30000


jsoncoproductPost : Coproduct -> RequestBuilder Http.Error ()
jsoncoproductPost coproduct =
  HttpBuilder.Task.post (Request.Url.Requests.jsoncoproductPost )
    |> HttpBuilder.Task.withBody (Http.jsonBody (Data.Coproduct.encoder coproduct))
    |> HttpBuilder.Task.withResolver (Http.stringResolver (EndpointsElm.httpResolveUnit))
    |> HttpBuilder.Task.withTimeout 30000


jsonlistPost : (List String) -> RequestBuilder Http.Error ()
jsonlistPost list =
  HttpBuilder.Task.post (Request.Url.Requests.jsonlistPost )
    |> HttpBuilder.Task.withBody (Http.jsonBody ((Encode.list Encode.string ) list))
    |> HttpBuilder.Task.withResolver (Http.stringResolver (EndpointsElm.httpResolveUnit))
    |> HttpBuilder.Task.withTimeout 30000


jsonmapPost : (Dict String Foo) -> RequestBuilder Http.Error ()
jsonmapPost dict =
  HttpBuilder.Task.post (Request.Url.Requests.jsonmapPost )
    |> HttpBuilder.Task.withBody (Http.jsonBody ((Encode.dict identity (Data.Foo.encoder ) dict)))
    |> HttpBuilder.Task.withResolver (Http.stringResolver (EndpointsElm.httpResolveUnit))
    |> HttpBuilder.Task.withTimeout 30000


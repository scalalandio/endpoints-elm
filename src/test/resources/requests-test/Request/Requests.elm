{-
  This file was generated by endpoints-elm interpreter.
  Do not edit this file manually.

  See https://github.com/scalalandio/endpoints-elm for more information.
-}

module Request.Requests exposing (..)

import Http
import HttpBuilder exposing (RequestBuilder)
import Json.Decode as Decode
import Json.Encode as Encode
import Bool.Extra
import Maybe.Extra

import Data.Coproduct exposing (..)
import Data.Foo exposing (..)
import Date exposing (..)
import Uuid exposing (..)


jsonstringPost : String -> RequestBuilder ()
jsonstringPost string =
  HttpBuilder.post "/json-string"
    |> HttpBuilder.withJsonBody (Encode.string  string)
    |> HttpBuilder.withExpect (Http.expectStringResponse (\_ -> Ok ()))
    |> HttpBuilder.withTimeout 30000


jsonintPost : Int -> RequestBuilder ()
jsonintPost int =
  HttpBuilder.post "/json-int"
    |> HttpBuilder.withJsonBody (Encode.int  int)
    |> HttpBuilder.withExpect (Http.expectStringResponse (\_ -> Ok ()))
    |> HttpBuilder.withTimeout 30000


jsonlongPost : Int -> RequestBuilder ()
jsonlongPost int =
  HttpBuilder.post "/json-long"
    |> HttpBuilder.withJsonBody (Encode.int  int)
    |> HttpBuilder.withExpect (Http.expectStringResponse (\_ -> Ok ()))
    |> HttpBuilder.withTimeout 30000


jsonfloatPost : Float -> RequestBuilder ()
jsonfloatPost float =
  HttpBuilder.post "/json-float"
    |> HttpBuilder.withJsonBody (Encode.float  float)
    |> HttpBuilder.withExpect (Http.expectStringResponse (\_ -> Ok ()))
    |> HttpBuilder.withTimeout 30000


jsondoublePost : Float -> RequestBuilder ()
jsondoublePost float =
  HttpBuilder.post "/json-double"
    |> HttpBuilder.withJsonBody (Encode.float  float)
    |> HttpBuilder.withExpect (Http.expectStringResponse (\_ -> Ok ()))
    |> HttpBuilder.withTimeout 30000


jsonbooleanPost : Bool -> RequestBuilder ()
jsonbooleanPost bool =
  HttpBuilder.post "/json-boolean"
    |> HttpBuilder.withJsonBody (Encode.bool  bool)
    |> HttpBuilder.withExpect (Http.expectStringResponse (\_ -> Ok ()))
    |> HttpBuilder.withTimeout 30000


jsonuuidPost : Uuid -> RequestBuilder ()
jsonuuidPost uuid =
  HttpBuilder.post "/json-uuid"
    |> HttpBuilder.withJsonBody (Uuid.encode  uuid)
    |> HttpBuilder.withExpect (Http.expectStringResponse (\_ -> Ok ()))
    |> HttpBuilder.withTimeout 30000


jsondatePost : Date -> RequestBuilder ()
jsondatePost date =
  HttpBuilder.post "/json-date"
    |> HttpBuilder.withJsonBody ((Encode.string << Date.toIsoString)  date)
    |> HttpBuilder.withExpect (Http.expectStringResponse (\_ -> Ok ()))
    |> HttpBuilder.withTimeout 30000


jsoncaseclassPost : Foo -> RequestBuilder ()
jsoncaseclassPost foo =
  HttpBuilder.post "/json-case-class"
    |> HttpBuilder.withJsonBody (Data.Foo.encoder  foo)
    |> HttpBuilder.withExpect (Http.expectStringResponse (\_ -> Ok ()))
    |> HttpBuilder.withTimeout 30000


jsoncoproductPost : Coproduct -> RequestBuilder ()
jsoncoproductPost coproduct =
  HttpBuilder.post "/json-coproduct"
    |> HttpBuilder.withJsonBody (Data.Coproduct.encoder  coproduct)
    |> HttpBuilder.withExpect (Http.expectStringResponse (\_ -> Ok ()))
    |> HttpBuilder.withTimeout 30000


jsonlistPost : (List String) -> RequestBuilder ()
jsonlistPost list =
  HttpBuilder.post "/json-list"
    |> HttpBuilder.withJsonBody ((Encode.list Encode.string )  list)
    |> HttpBuilder.withExpect (Http.expectStringResponse (\_ -> Ok ()))
    |> HttpBuilder.withTimeout 30000


jsonmapPost : (Dict String Foo) -> RequestBuilder ()
jsonmapPost dict =
  HttpBuilder.post "/json-map"
    |> HttpBuilder.withJsonBody ((Encode.dict identity (Data.Foo.encoder ) ) dict)
    |> HttpBuilder.withExpect (Http.expectStringResponse (\_ -> Ok ()))
    |> HttpBuilder.withTimeout 30000

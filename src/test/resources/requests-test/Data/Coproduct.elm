{-
  This file was generated by endpoints-elm interpreter.
  Do not edit this file manually.

  See https://github.com/scalalandio/endpoints-elm for more information.
-}

module Data.Coproduct exposing (..)

import Data.Inst1 exposing (..)
import Data.Inst2 exposing (..)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type Coproduct
  = CoproductInst1Type Inst1
  | CoproductInst2Type Inst2

init : Coproduct
init =CoproductInst1Type Data.Inst1.init

decoder : Decoder Coproduct
decoder = Decode.field "type" Decode.string
  |> Decode.andThen decoderTagged

decoderTagged : String -> Decoder Coproduct
decoderTagged tag = case tag of
  "Inst1" ->
    Decode.map CoproductInst1Type Data.Inst1.decoder

  "Inst2" ->
    Decode.map CoproductInst2Type Data.Inst2.decoder

  _ ->
    Decode.fail <| "Trying to decode Coproduct, but type " ++ tag ++ " is not supported!"

encoder : Coproduct -> Encode.Value
encoder model = case model of
  CoproductInst1Type inst1 ->
    Data.Inst1.encoderTagged ("type", "Inst1" ) inst1

  CoproductInst2Type inst2 ->
    Data.Inst2.encoderTagged ("type", "Inst2" ) inst2





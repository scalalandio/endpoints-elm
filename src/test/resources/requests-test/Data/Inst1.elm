{-
  This file was generated by endpoints-elm 0.9.1 interpreter.
  Do not edit this file manually.

  See https://github.com/scalalandio/endpoints-elm for more information.
-}

module Data.Inst1 exposing (..)


import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias Inst1 =
  { field1 : String
  , field2 : Float
  , field3 : Float
  , field4 : Bool
  }

init : Inst1
init =
  { field1 = ""
  , field2 = 0.0
  , field3 = 0.0
  , field4 = False
  }

decoder : Decoder Inst1
decoder = Decode.succeed Inst1
  |> required "field1" Decode.string 
  |> required "field2" Decode.float 
  |> required "field3" Decode.float 
  |> required "field4" Decode.bool 

encoder : Inst1 -> Encode.Value
encoder model = Encode.object (fieldsEncoder model)

encoderTagged : (String, String) -> Inst1 -> Encode.Value
encoderTagged (discriminator, tag) model = Encode.object ((discriminator, Encode.string tag) :: fieldsEncoder model)

fieldsEncoder : Inst1 -> List (String, Encode.Value)
fieldsEncoder model = 
  [ ( "field1", Encode.string model.field1 )
  , ( "field2", Encode.float model.field2 )
  , ( "field3", Encode.float model.field3 )
  , ( "field4", Encode.bool model.field4 )
  ]

setField1 : String -> Inst1 -> Inst1
setField1 newField1 inst1 =
  { inst1 | field1 = newField1 }

setField2 : Float -> Inst1 -> Inst1
setField2 newField2 inst1 =
  { inst1 | field2 = newField2 }

setField3 : Float -> Inst1 -> Inst1
setField3 newField3 inst1 =
  { inst1 | field3 = newField3 }

setField4 : Bool -> Inst1 -> Inst1
setField4 newField4 inst1 =
  { inst1 | field4 = newField4 }


updateField1 : (String -> String) -> Inst1 -> Inst1
updateField1 f inst1 =
  { inst1 | field1 = f inst1.field1 }

updateField2 : (Float -> Float) -> Inst1 -> Inst1
updateField2 f inst1 =
  { inst1 | field2 = f inst1.field2 }

updateField3 : (Float -> Float) -> Inst1 -> Inst1
updateField3 f inst1 =
  { inst1 | field3 = f inst1.field3 }

updateField4 : (Bool -> Bool) -> Inst1 -> Inst1
updateField4 f inst1 =
  { inst1 | field4 = f inst1.field4 }
